recv() - 
recvfrom() - 
recvmsg() - 

write()
sendto()

select - 
pselect - 

inet_pton
inet_ntop
htons
ntohs 

socket(int domain, int type, int protocol) - 
Starting with kernel 2.6.27, Linux provides a second use for the type argument,
by allowing two nonstandard flags to be ORed with the socket type. The
SOCK_CLOEXEC flag causes the kernel to enable the close-on-exec flag (FD_CLOEXEC)
for the new file descriptor. This flag is useful for the same reasons as the open()
O_CLOEXEC flag described in Section 4.3.1. The SOCK_NONBLOCK flag causes the kernel
to set the O_NONBLOCK flag on the underlying open file description, so that future
I/O operations on the socket will be nonblocking. This saves additional calls
to fcntl() to achieve the same result.


setsockopt(int fd, )
getsockname()
bind(int fd, const struct sockaddr *sock, socklen_t socklength)

 ----- listen(int sockfd, int backlog) -------
The backlog argument allows us to limit the number of such pending connections. 
Connection requests up to this limit succeed immediately. Further connection requests block until a pending connection
is accepted (via accept()), and thus removed from the queue of pending connections.
 SUSv3 specifies that the implementation should advertise this limit by defining the constant SOMAXCONN in <sys/socket.h>. On Linux, this constant is defined with the value 128. However, since kernel 2.4.25, Linux allows this limit to be adjusted at run time via the Linux-specific /proc/sys/net/core/somaxconn file. (In earlier kernel versions, the SOMAXCONN limit is immutable.). All modern implementations allow higher values of backlog, which are necessary for network servers employing TCP sockets to serve large numbers of clients.


connect()
accept()


Datagram Sockets
The operation of datagram sockets can be explained by analogy with the postal system:
1.
The socket() system call is the equivalent of setting up a mailbox. (Here, we
assume a system like the rural postal service in some countries, which both
picks up letters from and delivers letters to the mailbox.) Each application that
wants to send or receive datagrams creates a datagram socket using socket().
So c ke t s : Int r o d u c t io n
11592. In order to allow another application to send it datagrams (letters), an applica-
tion uses bind() to bind its socket to a well-known address. Typically, a server
binds its socket to a well-known address, and a client initiates communication
by sending a datagram to that address. (In some domains—notably the UNIX
domain—the client may also need to use bind() to assign an address to its socket
if it wants to receive datagrams sent by the server.)
3. To send a datagram, an application calls sendto(), which takes as one of its argu-
ments the address of the socket to which the datagram is to be sent. This is
analogous to putting the recipient’s address on a letter and posting it.
4. In order to receive a datagram, an application calls recvfrom(), which may block
if no datagram has yet arrived. Because recvfrom() allows us to obtain the
address of the sender, we can send a reply if desired. (This is useful if the
sender’s socket is bound to an address that is not well known, which is typical
of a client.) Here, we stretch the analogy a little, since there is no requirement
that a posted letter is marked with the sender’s address.
5. When the socket is no longer needed, the application closes it using close().
Just as with the postal system, when multiple datagrams (letters) are sent from one
address to another, there is no guarantee that they will arrive in the order they
were sent, or even arrive at all. Datagrams add one further possibility not present
in the postal system: since the underlying networking protocols may sometimes
retransmit a data packet, the same datagram could arrive more than once.

Server --
socket() -> bind() -> recvfrom() -> sendto() -> close()

Client --
socket() -> sendto() -> recvfrom() -> close()
